function [uxx]=dss044(xl,xu,n,u,ux,nl,nu)
%
%	Function dss044 computes a fourth-order approximation of a
%	second-order derivative, with or without the normal derivative
%	at the boundary.
%
%	Argument list
%
%	xl	Left value of the spatial independent variable (input)
%
%	xu	Right value of the spatial independent variable (input)
%
%	n	Number of spatial grid points, including the end
%	points (input)
%
%	u	One-dimensional array of the dependent variable to be
%	differentiated (input)
%
%	ux	One-dimensional array of the first derivative of u. 
%		The end values of ux, ux(1) and ux(n), are used in 
%		Neumann boundary conditions at x = xl and x = xu, 
%		depending on the arguments nl and nu (see the de- 
%		scription of nl and nu below)
%
%	uxx	One-dimensional array of the second derivative of u
%	(output)
%
%	nl	Integer index for the type of boundary condition at
%	x = xl (input).	The allowable values are
%
%	1 - Dirichlet boundary condition at x = xl
%	(ux(1) is not used)
%
%		2 - Neumann boundary condition at x = xl
%		(ux(1) is used)
%		
%	nu	Integer index for the type of boundary condition at
%		x = xu (input).	The allowable values are
%		
%		1 - Dirichlet boundary condition at x = xu
%		(ux(n) is not used)
%		
%		2 - Neumann boundary condition at x = xu
%		(ux(n) is used)
%		
%	The following derivation was completed by W. E. Schiesser, Depts
%	of CHE and Math, Lehigh University, Bethlehem, PA 18015, USA, on
%	December 15, 1986.	Additional details are given in function
%	dss042.
%	
%	
%	Grid spacing
    dx=(xu-xl)/(n-1);
%	
%	1/(12*dx**2) for subsequent use
    r12dxs=1./(12.0*dx^2);
%
%	uxx at the left boundary
%
%	Without ux (equation (53))
        if nl==1
            uxx(1)=r12dxs*...
            (	45.0*u(1)...
            -154.0*u(2)...
            +214.0*u(3)...
            -156.0*u(4)...
            +61.0*u(5)...
            -10.0*u(6));
%
%	With ux (equation (36))
        elseif nl==2
            uxx(1)=r12dxs*...
            (-415.0/6.0*u(1)...
            +96.0*u(2)...
            -36.0*u(3)...
            +32.0/3.0*u(4)...
            -3.0/2.0*u(5)...
            -50.0*ux(1)*dx);
         end
%
%	uxx at the right boundary
%
%	Without ux (equation (54))
    if nu==1
        uxx(n)=r12dxs*...
        (	45.0*u(n	)...
        -154.0*u(n-1)...
        +214.0*u(n-2)...
        -156.0*u(n-3)...
        +61.0*u(n-4)...
        -10.0*u(n-5));
%
%	With ux (equation (37))
    elseif nu==2
        uxx(n)=r12dxs*...
        (-415.0/6.0*u(n	)...
        +96.0*u(n-1)...
        -36.0*u(n-2)...
        +32.0/3.0*u(n-3)...
        -3.0/2.0*u(n-4)...
        +50.0*ux(n	)*dx);
    end
%
%	uxx at the interior grid points
%	
%	i = 2 (equation (23))
        uxx(2)=r12dxs*...	
        (	10.0*u(1)...
            -15.0*u(2)...
            -4.0*u(3)...
            +14.0*u(4)...
            -6.0*u(5)...
            +1.0*u(6));
%		
%	i = n-1 (equation (24))
        uxx(n-1)=r12dxs*...	
        (	10.0*u(n	)...
        -15.0*u(n-1)...
        -4.0*u(n-2)...
        +14.0*u(n-3)...
        -6.0*u(n-4)...
        +1.0*u(n-5));
%	
%	i = 3, 4,..., n-2 (equation (9))
        for i=3:n-2
        uxx(i)=r12dxs*...
        (	-1.0*u(i-2)...
            +16.0*u(i-1)...
            -30.0*u(i	)...
            +16.0*u(i+1)...
            -1.0*u(i+2));
        end	
    end	